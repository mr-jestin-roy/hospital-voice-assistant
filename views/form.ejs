<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div style="margin: 30px; display: flex">
      
      <div style="float: left; width: 45%; height: auto;">
        <h1>Enter your details</h1>

        <form action="/post" method="POST">
          
          <label>Name</label>
          <input type="text" name="name" id="name" placeholder="Name" style="width: 50%; margin: 5px 0;">
          <label>Address</label>
          <input type="text" name="address" id="address" placeholder="Address" style="width: 50%; margin: 5px 0;">
          <label>Phone Number</label>
          <input type="text" name="phone" id="phone" placeholder="Phone Number" style="width: 50%; margin: 5px 0;">
          <label>Hospital Block</label>
          <input type="text" name="block" id="block" placeholder="Block" style="width: 50%; margin: 5px 0;">
          <label>Room No.</label>
          <input type="text" name="room" id="room" placeholder="Room No. (give 0 if not applicable)" style="width: 50%; margin: 5px 0;">
          <label>Type of visitor</label>
          <select name="type" id="type" style="width: 55%; margin: 5px 0;">
            <option value="" selected disabled>Choose Type</option>
            <option value="bystander">Bystander</option>
            <option value="casuality">Casuality</option>
            <option value="covidtest">Covid Test</option>
            <option value="appointment">Doctor's Appointment</option>
            <option value="medicalrep">Medical Rep</option>
            <option value="staff">Staff</option>
            <option value="others">Others</option>
          </select>          
          <label>Checkin Time</label>
          <input type="text" name="time" id="time" placeholder="Check in time" style="width: 50%; margin: 5px 0;">

          <br><br>
          <button id='submitButton' class='outline' style="margin-left:auto; margin-right:auto; width:20%;" type="submit">Submit</button>
        </form>

      </div>

      <div style="float: right; width: 45%; height: auto; margin: 10px; text-align:left">
        <br />
        <h1 id="listeningTo">Enter your Name</h1>
        <h3 id="typeListing" style="display: none;">Bystander/ Casuality/ Covid Test/ Doctor's Appointment/ Medical Rep/ Staff/ Others</h3>
        <h3 id="result" style="display: none;"> Did you say </h3>
        <h3 id="confirmation" style="display: none;">Do you want to go again? <br> Say Yes or No </h3>
        <h3 id="countdown"> Starting to listen in 5 seconds ...</h3>

        <div style="display: none;">
          <button class="outline" style="margin:5px;  font-size:x-large;">Yes</button>
          <button class="outline"style="margin: 5px; font-size:x-large;">No</button>
        </div>
      </div>
    </div>

   

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
    
    <script type="text/javascript">


      const name = document.getElementById('name')
      const address = document.getElementById('address')
      const phone = document.getElementById('phone')
      const block = document.getElementById('block')
      const roomno = document.getElementById('room')
      const type = document.getElementById('type')
      const submitButton = document.getElementById('submitButton')

      const result = document.getElementById('result')
      const countdown = document.getElementById('countdown')
      const confirmation = document.getElementById('confirmation')
      const listeningTo = document.getElementById('listeningTo')
      const typeListing = document.getElementById('typeListing')

      const time = document.getElementById('time')
      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

      function timeNow(i) {
        var d = new Date(),
          h = (d.getHours()<10?'0':'') + d.getHours(),
          m = (d.getMinutes()<10?'0':'') + d.getMinutes();
          date = d.getDate();
          month = months[d.getMonth()];
          year = d.getFullYear();
        i.value = h + ':' + m + ", " + date + " " +  month + " " + year;
      }

      timeNow(time)

      

      var timeouts = []

      var secs = 3;
      var x = setInterval(function() {
        secs--;
        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

        if (secs < 0) {
          clearInterval(x);
          countdown.innerText = "";
          fillForm();
        }
      }, 1000);


      function fillForm(){

        function runSpeechRecognition(field) {
          // get output div reference
          console.log(`Field is ${field}`);
          var output = document.getElementById("output");
          // get action element reference
          var action = document.getElementById("action");
              // new speech recognition object
              var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;
              var recognition = new SpeechRecognition();
          
              // This runs when the speech recognition service starts
              recognition.onstart = function() {
                
              };
              
              recognition.onspeechend = function() {
                  recognition.stop();
              }
            
              // This runs when the speech recognition service returns result
              recognition.onresult = function(event) {
                  var transcript = event.results[0][0].transcript;
                  var confidence = event.results[0][0].confidence;
                  console.log(transcript)
                  result.innerText = `You said ${transcript}`
                  result.style.display = "block";
                  
                  countdown.style.display = "block";
                  confirmation.style.display = "block";
                  
                  if(field == 'name'){
                    name.value = transcript;
                    
                    countdown.style.display = "block";
                    var secs = 3;
                    var x = setInterval(function() {
                      secs--;
                      countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                      if (secs < 0) {
                        clearInterval(x);
                        countdown.innerText = "Listening for confirmation";
                        runSpeechRecognition('nameAgain')
                      }
                    }, 1000);
                  }
                  else if(field == 'nameAgain'){
                    listeningTo.innerText = "Enter your name again"
                    result.style.display = "none";
                    confirmation.style.display = "none";
                    countdown.innerText = "";
                    countdown.style.display = "block";
                    if(transcript == 'yes'){
                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('name')
                        }
                      }, 1000);
                    }
                    else if(transcript== 'no'){
                      listeningTo.innerText = "Enter your Address"

                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('address')
                        }
                      }, 1000);
                    }
                  }
                  else if(field == 'address'){
                    address.value = transcript;
                    
                    var secs = 3;
                    var x = setInterval(function() {
                      secs--;
                      countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                      if (secs < 0) {
                        clearInterval(x);
                        countdown.innerText = "Listening for confirmation";
                        runSpeechRecognition('addressAgain')
                      }
                    }, 1000);
                  }
                  else if(field == 'addressAgain'){
                    listeningTo.innerText = "Enter your address again"
                    result.style.display = "none";
                    confirmation.style.display = "none";
                    countdown.style.display = "block";
                    if(transcript == 'yes'){
                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('address')
                        }
                      }, 1000);
                    }
                    else if(transcript== 'no'){
                      listeningTo.innerText = "Enter your phone number"

                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('phone')
                        }
                      }, 1000);
                    }
                  }
                  else if(field == 'phone'){
                    phone.value = transcript;
                    
                    var secs = 3;
                    var x = setInterval(function() {
                      secs--;
                      countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                      if (secs < 0) {
                        clearInterval(x);
                        countdown.innerText = "Listening for confirmation";
                        runSpeechRecognition('phoneAgain')
                      }
                    }, 1000);
                  }
                  else if(field == 'phoneAgain'){
                    listeningTo.innerText = "Enter your phone number again"
                    result.style.display = "none";
                    confirmation.style.display = "none";
                    countdown.style.display = "block";
                    if(transcript == 'yes'){
                      var secs = 5;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('phone')
                        }
                      }, 1000);
                    }
                    else if(transcript== 'no'){
                      listeningTo.innerText = "Enter your Block"

                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('block')
                        }
                      }, 1000);
                    }
                  }
                  else if(field == 'block'){
                    block.value = transcript;
                    
                    var secs = 5;
                    var x = setInterval(function() {
                      secs--;
                      countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                      if (secs < 0) {
                        clearInterval(x);
                        countdown.innerText = "Listening for confirmation";
                        runSpeechRecognition('blockAgain')
                      }
                    }, 1000);
                  }
                  else if(field == 'blockAgain'){
                    listeningTo.innerText = "Enter your block again"
                    result.style.display = "none";
                    confirmation.style.display = "none";
                    countdown.style.display = "block";
                    if(transcript == 'yes'){
                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('block')
                        }
                      }, 1000);
                    }
                    else if(transcript== 'no'){
                      listeningTo.innerText = "Enter your room number"

                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('roomno')
                        }
                      }, 1000);
                    }
                  }else if(field == 'roomno'){
                    roomno.value = transcript;
                    
                    var secs = 3;
                    var x = setInterval(function() {
                      secs--;
                      countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                      if (secs < 0) {
                        clearInterval(x);
                        countdown.innerText = "Listening for confirmation";
                        runSpeechRecognition('roomnoAgain')
                      }
                    }, 1000);
                  }
                  else if(field == 'roomnoAgain'){
                    listeningTo.innerText = "Enter your room number again"
                    result.style.display = "none";
                    confirmation.style.display = "none";
                    countdown.style.display = "block";
                    if(transcript == 'yes'){
                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('roomno')
                        }
                      }, 1000);
                    }
                    else if(transcript== 'no'){
                      listeningTo.innerText = `Enter your type`
                      typeListing.style.display = 'block';
                      var secs = 5;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('type')
                        }
                      }, 1000);
                    }  
                  }else if(field == 'type'){

                    if(transcript == 'bystander')
                      type.selectedIndex = '1';
                    else if(transcript == 'casuality')
                      type.selectedIndex = '2';
                    else if(transcript == 'covid test')
                      type.selectedIndex = '3';
                    else if(transcript == 'doctor\'s appointment')
                      type.selectedIndex = '4';
                    else if(transcript == 'medical rep')
                      type.selectedIndex = '5';  
                    else if(transcript == 'staff')
                      type.selectedIndex = '6';
                    else if(transcript == 'others')
                      type.selectedIndex = '7';
                    
                    var secs = 3;
                    var x = setInterval(function() {
                      secs--;
                      countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                      if (secs < 0) {
                        clearInterval(x);
                        countdown.innerText = "Listening for confirmation";
                        runSpeechRecognition('typeAgain')
                      }
                    }, 1000);
                  }
                  else if(field=='typeAgain'){
                    listeningTo.innerText = "Enter your type again"
                    result.style.display = "none";
                    confirmation.style.display = "none";
                    countdown.style.display = "block";
                    if(transcript == 'yes'){
                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Starting to listen in ${secs} seconds ... `;    

                        if (secs < 0) {
                          clearInterval(x);
                          countdown.innerText = "Listening now";
                          runSpeechRecognition('type')
                        }
                      }, 1000);
                    }
                    else if(transcript== 'no'){
                      typeListing.style.display = 'none';
                      listeningTo.innerText = "Thank you for your time, submitting form now..."

                      var secs = 3;
                      var x = setInterval(function() {
                        secs--;
                        countdown.innerText =  `Submitting in ${secs} seconds ... `;    

                        if (secs == 0) {
                          clearInterval(x);
                          submitButton.click();
                          
                        }
                      }, 1000);
                    }  
                    
                  }
                  
              };
            
               // start recognition
               recognition.start();
        }
      
        console.log('Print stuff')
        countdown.innerText = "Listening now"
        const nameRecognition = runSpeechRecognition('name');


      

      }

      
      
      
      
      
      // Load the image model and setup the webcam
      async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(500, 500, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        //labelContainer = document.getElementById("label-container");
        //for (let i = 0; i < maxPredictions; i++) {
          // and class labels
          //labelContainer.appendChild(document.createElement("div"));
        //}
      }
      async function loop() {
        webcam.update(); // update the webcam frame
        const action = await predict();
        window.requestAnimationFrame(loop);
        if (action == 1) {
          //action if hand is there
          //resultDiv.style.display = "block";
          progress.style.display ='inline-block'
          //progress.style.width = "100%";
          timeouts.push(setTimeout(() => {
            if (action == 1) {
              console.log('Print stuff')
              runSpeechRecognition();
              for (var i=0; i<timeouts.length; i++) {
                clearTimeout(timeouts[i]);
              }
            }
          },3000));
        } else {
          //action is there is no hand
          //resultDiv.style.display = "none";
          progress.style.display ='none'
          for (var i=0; i<timeouts.length; i++) {
            clearTimeout(timeouts[i]);
          }
        }
      }

      // run the webcam image through the image model
      async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
          const classPrediction =
            prediction[i].className +
            ": " +
            prediction[i].probability.toFixed(2);
          //labelContainer.childNodes[i].innerHTML = classPrediction;
        }
        // console.log(prediction[1]['probability'])
        return prediction[1]["probability"];
      }
      
    </script>

    
    <!-- <script defer>
      init();
    </script> -->
  </body>
</html>
