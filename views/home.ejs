<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Hospital Voice Assistant</title>
    <link rel="stylesheet" href="style.css" />
    <script src="./face-api.js"></script>
    <style>
      canvas {
        position:absolute;
        z-index:100;
      }
    </style>
  </head>
  <body>
    <div style="margin: 30px; display: flex">
      <div style="float: left; width: 45%; height: auto">
        <h1>ABC Hospital</h1>
        <h5 style="margin-bottom: 5px">
          Welcome to the future of hospital appointments!
        </h5>
        <h5 style="margin-top: 5px">
          Stand as per social distancing norms and put up your hand to start the
          walkthrough
        </h5>
        <button class="outline" style="font-size: x-large;">
          <a href="/form">Start</a>
        </button>
      </div>
      <div style="float: right; width: 45%; height: auto; margin: 10px; text-align:center">
        <br />
        <div id="videodiv" style="display: flex; width:720; height:560;">
          <video id="webcam-container" width="720" height="560" autoplay muted></video>
        </div>
        <div id="banner" style="display: none">INPUT IS A YES, LETS ROLL !</div>
        <br>
        <div id="progressbar" class='cp-spinner  cp-round' style="display: none;"></div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>

    <script defer type="text/javascript" >

      const video = document.getElementById('webcam-container');
      const videoDiv = document.getElementById('videodiv');
      const progress = document.getElementById('progressbar')

      Promise.all([
        faceapi.nets.tinyFaceDetector.loadFromUri('./models')
      ]).then(startVideo)

      function startVideo(){
        navigator.getUserMedia(
          { video : {} },
          stream => video.srcObject = stream,
          err => console.error(err)
        )
      }
      var timeouts = []
      video.addEventListener('play', ()=>{
        const canvas = faceapi.createCanvasFromMedia(video)
        const displaySize = { width: video.width, height: video.height}
        faceapi.matchDimensions(canvas,displaySize)
        videoDiv.appendChild(canvas)
       setInterval(async () => {
          const detections = await faceapi.detectAllFaces(video,new faceapi.TinyFaceDetectorOptions())
          if(detections[0] !== undefined){
            console.log(detections[0].score)
            progress.style.display ='inline-block'
            timeouts.push(setTimeout(() => {
              if (detections[0].score >= 0.90) {
              window.location = '/form'
              }
            },3000));
          }else{
            progress.style.display ='none'

            for (var i=0; i<timeouts.length; i++) {
              clearTimeout(timeouts[i]);
            }
          }
          const resizedDetections = faceapi.resizeResults(detections, displaySize)
          canvas.getContext('2d').clearRect(0,0,canvas.width, canvas.height)
          faceapi.draw.drawDetections(canvas, resizedDetections)
        }, 100)
      })

      

    </script>
    
   
  </body>
</html>
